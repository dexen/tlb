#!/usr/bin/env php
<?php

ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);

function cmd_help($argv0, $argv)
{
	$name = $argv0;
	echo "Usage:\n";
	echo "	$name deploy [name] # deploy (create) a new instance\n";
	echo "	$name sqlite-password [-] # set up the SQLite password of the local instance\n";
}

function guard_instance_name_sanity(string $name) : string
{
	if ($name === '') {
		echo "No instance name provided.\n";
		exit(2); }

		# for practical safety, don't allow slash
		# this is a temporary simplified solution, expect a more nuanced check in the future
	if (strstr($name, '/') === false)
		return $name;
	throw new Exception('unsupported: slash');
}

function prompt_instance_name() : string
{
	echo "Instance name: ";
	return trim(fgets(STDIN), "\n");
}

function action_update_my_swarm_manager(string $name)
{
	if (!file_exists('./MY_SWARM'))
		return;

		# go via fork()/wait(), because the alternative of system()
		# doesn't pass through partial lines (lines without terminator)
		# like the data entry prompt
	$v = pcntl_fork();
	if ($v === 0)
		pcntl_exec('./MY_SWARM_CONFIG', [ $name, 'localhost' ]);

	pcntl_waitpid($v, $status);

	system('./MY_SWARM restart');
}

function cmd_deploy($argv0, $argv)
{
	$repositoryUrl = 'https://github.com/dexen/tlb';
	$repositoryUrl = 'git@github.com:dexen/tlb.git';

	$name = guard_instance_name_sanity($argv[1] ?? prompt_instance_name());

	system('git clone ' .escapeshellarg($repositoryUrl) .' ' .escapeshellarg($name), $ret);
	if ($ret) {
		echo "Failed to run git clone.\n";
		exit($ret); }

	action_update_my_swarm_manager($name);

	echo "All done.\n";

	exit(0);
}

function cmd_sqlite_password($argv0, $argv)
{
	$to_file_pn = 'public_html/adminer/sqlite-password-hash.php';

	printf('enter new SQLite password: ');
	flush();
	$password = trim(fgets(STDIN), "\n");
	printf('new password: "%s"' .PHP_EOL, $password);
	if (strlen($password) < 16) {
		printf("Error: password too short, expected at least %d characters\n", 16);
		exit(1); }
	$hash = password_hash($password, PASSWORD_DEFAULT);
	if ($hash === false) {
		printf("Could not prepare password hash\n");
		exit(1); }
	$v = file_put_contents($to_file_pn, '<?php return ' .var_export($hash, $return = true) .';');
	if ($v === false) {
		unlink($to_file_pn);
		printf("Could not store password hash\n");
		exit(1); }
	exit(0);
}

switch ($argv[1] ?? 'help') {
case '--help':
case 'help':
	cmd_help($argv[0], array_slice($argv, 1));
	exit(0);
case 'deploy':
	cmd_deploy($argv[0], array_slice($argv, 1));
	exit(1);
case 'sqlite-password':
	cmd_sqlite_password($argv[0], array_slice($argv, 1));
	exit(1);
default:
	echo "$argv[0]: unsupported command $argv[1]\n";
	exit(2);
}
